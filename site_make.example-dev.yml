# Example config file for local development builds.
#
# Imagine a scenario where you maintain two contrib projects on drupal.org, an
# install profile / distro called "example_profile" and a module called
# "my_module". You're doing development on both of these projects in your site
# repository. You want to test a new build including changes to example_profile
# or my_module, which have not been tagged and released on drupal.org yet.
# Here's what you do:
#
#  1. Set up projects you maintain outside your site repo as git subtrees stored
#     in my-site-repo/projects/my-project.
#
#  2. Set up two different site-make config files. One should look like
#     site_make.example-prod.yml, this is used for production builds, building
#     from tagged releases available in projects' individual repositories. The
#     second config file should look like this one, site_make.example-dev.yml.
#     This is for builds that deliberately skip the `git subtree pull` and
#     `git subtree merge` steps for projects that have changes in the site repo which
#     have not been published or tagged in the projects' main repositories.
#
#  3. When you want to rebuild without blowing away unpublished changes, just
#     use your dev instead of your prod config like this:
#
#       drush site-make ./site_make.example-dev.yml
#
target: docroot
build_file: build.make
subtrees:
  example_profile:
    path: docroot/profiles/example_profile
    pull: FALSE
    merge: FALSE
  my_module:
    path: docroot/sites/all/modules/contrib/my_module
    pull: FALSE
    merge: FALSE
commands:
  - 'rm -rf docroot/sites/default; cd docroot/sites; ln -s ../../symlink-these/default default'
  - 'rm -rf docroot/.htaccess; cd docroot/; ln -s ../symlink-these/.htaccess .htaccess'
  - 'rm -rf docroot/robots.txt; cd docroot/; ln -s ../symlink-these/robots.txt robots.txt'
